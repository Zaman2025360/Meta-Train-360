import { Mesh, Object3D, Vector2, Vector3 } from 'three';
import { PointerEventsMap } from './event.js';
import type { Root } from '@react-three/fiber/dist/declarations/src/core/renderer.js';
declare module 'three' {
    interface Object3D {
        __r3f?: {
            eventCount: number;
            handlers: Record<string, ((e: any) => void) | undefined>;
            root: Root['store'];
        };
        /**
         * undefined and true means the transformation is ready
         * false means transformation is not ready
         */
        transformReady?: boolean;
    }
}
export declare function updateAndCheckWorldTransformation({ transformReady, parent, matrix, matrixWorld }: Object3D): boolean;
export declare function hasObjectListeners({ _listeners, __r3f }: Object3D): boolean;
export declare function getObjectListeners<E>(object: Object3D, forEvent: keyof PointerEventsMap): Array<(event: E) => void> | undefined;
export declare function getClosestUV(target: Vector2, point: Vector3, mesh: Mesh): void;
